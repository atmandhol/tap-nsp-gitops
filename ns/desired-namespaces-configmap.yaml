#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ns:funcs.star", "is_supply_chain", "is_profile", "get_scanner_for_ns", "get_snyk_values")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: desired-namespaces
  namespace: tap-namespace-provisioning
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
data:
  #@yaml/text-templated-strings
  namespaces.yaml: |
    #@data/values
    ---
    (@= yaml.encode(data.values) @)

#! This loop will now loop over the namespace list in
#! in ns.yaml and will create those namespaces.
#@ for ns in data.values.namespaces:
---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ ns.name

#! ================================================================================================================
#! This is a Workaround to install Scanners because they are neither Cluster scoped or properly namespaced.
#@ if is_supply_chain(['testing_scanning']) and is_profile(['full', 'build']) and get_scanner_for_ns() == "snyk":
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: #@ "snyk-scanner-" + data.values.name
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  packageRef:
    refName: snyk.scanning.apps.tanzu.vmware.com
    versionSelection:
      constraints: ">1.0.0"
      prereleases: {}
  serviceAccountName: tap-install-sa
  values:
  - secretRef:
      name: #@ "snyk-scanner-" + data.values.name
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "snyk-scanner-" + data.values.name
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
stringData:
  values.yml: #@ yaml.encode(get_snyk_values())
#@ end


#@ end
